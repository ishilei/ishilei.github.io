<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>地球太冷</title><link href="http://www.ishilei.com/" rel="alternate"></link><link href="http://www.ishilei.com/feeds/technology.atom.xml" rel="self"></link><id>http://www.ishilei.com/</id><updated>2014-11-06T20:10:00+08:00</updated><entry><title>AdHocMonitor系统中关于视频部分的说明</title><link href="http://www.ishilei.com/pages/2014/11/06/ctreat.html" rel="alternate"></link><updated>2014-11-06T20:10:00+08:00</updated><author><name>shilei</name></author><id>tag:www.ishilei.com,2014-11-06:pages/2014/11/06/ctreat.html</id><summary type="html">&lt;h3&gt;&lt;center&gt;AdHocMonitor系统中关于视频部分的说明&lt;/h3&gt;
&lt;h5&gt;一. 客户端相关cpp的简要说明&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=''&gt;main.cpp &lt;/font&gt;：其中包括字符格式的设置，QSplashSreen实现Qt程序的画面启动等。 &lt;/li&gt;
&lt;li&gt;common.h : 定义程序的通用信息，即一些宏定义。&lt;/li&gt;
&lt;li&gt;abstractconf.cpp : 设置类的基类。比如虚函数 &lt;code&gt;loadConf()&lt;/code&gt;,&lt;code&gt;saveConf()&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;Uiappabout : 显示程序关于信息，包括软件的作者学校等信息。&lt;/li&gt;
&lt;li&gt;Uiappoutput.cpp : 整个程序运行中相关信息的显示输出类&lt;/li&gt;
&lt;li&gt;Uidatasingle.cpp : 视频连接界面。有显示网络节点，新建及放弃连接等成员函数&lt;/li&gt;
&lt;li&gt;Uivideowindow.cpp : 视频渲染底板。本程序提供了6个视频显示窗口实现&lt;code&gt;addWin(),delWin()&lt;/code&gt;添加删除渲染空间。&lt;/li&gt;
&lt;li&gt;Uimainconf.cpp : 设置界面集合。&lt;code&gt;addConf()&lt;/code&gt;增加相关配置界面，此程序中目前有程序，路由，视频和扩展4个配置界面。&lt;code&gt;confUpdate()&lt;/code&gt;完成更新。&lt;code&gt;applyClicked()&lt;/code&gt;应用配置修改。还有一些其他相关配置参数的操作。&lt;/li&gt;
&lt;li&gt;Uivideocons.cpp : 视频连接列表界面组件。实现删除，清空列表。比如双击连接的IP地址，即可删除对应此IP的视频连接。&lt;/li&gt;
&lt;li&gt;Uivideoconf.cpp : 视频配置界面组件。其中包括一些端口的设置，刷新时间、确认时间、最大连接数、是否自动重连等参数的设置。&lt;/li&gt;
&lt;li&gt;Uivideorender.cpp : 视频画面渲染类。客户端将接收到的画面数据进行渲染，最终显示在屏幕上。&lt;/li&gt;
&lt;li&gt;Uivideosingle.cpp : 独立新建视频连接。添加选择节点&lt;code&gt;addNode()&lt;/code&gt;，双击处理单元 &lt;code&gt;nodeSelect()&lt;/code&gt;。以及新建独立视频连接的相关实现。&lt;/li&gt;
&lt;li&gt;Uivideowin.cpp : 单视频画面窗口。其中包括了解码、渲染等相关类。&lt;/li&gt;
&lt;li&gt;decodethread.cpp : 解码线程。&lt;/li&gt;
&lt;li&gt;videocom.cpp : 视频通讯控制类。获取视频配置界面的参数，并且通过&lt;code&gt;QUdpSocket&lt;/code&gt;类和远程端口建立连接，把当前客户端参数设置发送给服务器。&lt;/li&gt;
&lt;li&gt;videoconf.cpp : 继承了abstractconf类，并且实现了&lt;code&gt;loadConf()&lt;/code&gt;,&lt;code&gt;saveConf()&lt;/code&gt;等基类中的虚函数。&lt;/li&gt;
&lt;li&gt;videoins.cpp : 单视频连接。视频配置界面组件的参数获取（由用户自定义视频传输的参数）。&lt;/li&gt;
&lt;li&gt;videomain.cpp : 视频控制系统核心。其中包括了，各种组件的的获得，状态的变化&lt;code&gt;insStarted（）&lt;/code&gt;
 等signal以及视频的显示新建，启动、停止等slot。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;二. 服务器端相关cpp的简要说明&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Common.h :  变量及结构定义。其中包括控制参数结构体，客户端连接队列，客户端信息结构体，缓冲区以及各种视频参数变量的声明定义。&lt;/li&gt;
&lt;li&gt;H264.cpp : 摄像头的初始化&lt;code&gt;InitCarm()&lt;/code&gt;,RTP连接的初始化&lt;code&gt;InitRTPConPara()&lt;/code&gt;,以及数据压缩
API的调用。包括TS传输时，pmt，pat，pts，pcr等信息的写入。最后实现两种RTP/TS发送方式的&lt;code&gt;sendMainTS()&lt;/code&gt;和&lt;code&gt;sendMainRTP()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;H264server.cpp : 负责服务器端的监听。其中有初始化客户端连接队列，初始化连接参数，从配置文件读写取配置参数，接受客户端连接的请求，从客户端队列中移除某个客户端等具体操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;三.server端的主要运行流程&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Init_Para() //初始化传输参数&lt;/code&gt; 在h264.conf中调用&lt;code&gt;ReadConfigfile()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Init_ctrl_property() //初始化控制信息&lt;/code&gt;  即_control结构体，内有sysexit sendThread等成员；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Init_client_queue() //初始化客户端连接队列&lt;/code&gt; 即结构体_clientQ,内有RTPsession RTPsessionParams等成员；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comu_server_listen() //创建socket连接，申请serverMsgBuffer[]缓冲区接收客户端发送过来的消息&lt;/code&gt;  消息中包括消息类型如&lt;code&gt;SOC_CON2,SOC_RES，resolution,framerate,streamtype...&lt;/code&gt;然后把消息参数写如h264.conf配置文件中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h6&gt;接着需要判断刚接收到streamtype类型，如果streamtype=1，表示客户端希望TS传输方式，如果streamtype=2，则表示客户端希望RTP传输方式&lt;/h6&gt;
&lt;h6&gt;TS传输方式,主要步骤在&lt;code&gt;sendMainTS()&lt;/code&gt;函数中&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump_video_para&lt;/span&gt;&lt;span class="err"&gt;（）&lt;/span&gt;&lt;span class="c1"&gt;//打印视频传输相关参数`  即从客户端接收的参数消息&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Init_Carm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//初始化摄像头 其中包括了帧缓冲区的申请，内存映射等操作，最后采集图像。  &lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetCamrFramNALU&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//得到一个NALU，这里实现时默认NALU即一个视频帧，其中还包括了MFC（Multi Fomat Codec,支持H.264的编解码）编码的三个函数，对一帧进行了压缩编码  &lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retransmit_si_info&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;mpegts_insert_pcr_only&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//插入PMT，PAT表和PCR  &lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;prepare_packet_header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//write PES header ,write pts dts  &lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;sendto&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//往客户端发送数据帧  TS_PACKET_SIZE ： 188字节&lt;/span&gt;

&lt;span class="cp"&gt;######RTP传输方式，主要步骤在`sendMainRTP()`函数中&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump_video_para&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//打印视频传输相关参数  &lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Init_Carm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitRTPConPara&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//初始化RTP连接 如增加请求连接的客户端地址  &lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetCamrFramNALU&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;和&lt;/span&gt;&lt;span class="n"&gt;TS&lt;/span&gt;&lt;span class="err"&gt;一样，通过&lt;/span&gt;&lt;span class="n"&gt;ioctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;VIDIOC_DQBUF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;从缓冲区中取得&lt;/span&gt;        &lt;span class="err"&gt;一帧并进行压缩编码。&lt;/span&gt;  
 &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;根据帧的大小&lt;/span&gt;&lt;span class="n"&gt;payloadsize&lt;/span&gt;&lt;span class="err"&gt;判断是否需要分包。然后调用&lt;/span&gt;&lt;span class="n"&gt;RTP&lt;/span&gt;&lt;span class="err"&gt;的&lt;/span&gt;&lt;span class="n"&gt;sendPacket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;发送数据帧&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;四. client流程,主要说明DecodeThread.cpp&lt;/h5&gt;
&lt;h6&gt;判断videostreamtype的值&lt;/h6&gt;
&lt;h6&gt;videostreamtype==2&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;创建RTP会话，设置RTP参数&lt;/li&gt;
&lt;li&gt;注册所有容器格式和COEDC，包括avCodeCtx解码器上下文结构，其中包括视频 width,height等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avcodec_open() //打开解码器&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.BeginDataAccess() //开始接收数据&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看nalutype的值，判断是否分片传输的。如果是分片传输，则需要判断起始片和结束片。&lt;/li&gt;
&lt;li&gt;接收完整NALU后调用&lt;code&gt;avcodec_decode_video()&lt;/code&gt;解码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sws_getContext()&lt;/code&gt;进行图像转换，把YUV420P(亮度和色彩，节省带宽)转换成RGB32&lt;/li&gt;
&lt;/ol&gt;
&lt;h6&gt;videostreamtype==1&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;注册容器格式和CODEC &lt;code&gt;avcodec_init()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avFormatCtx-&amp;gt;streams[count]-&amp;gt;codec-&amp;gt;codec_type==CODEC_TYPE_VIDEO&lt;/code&gt;寻找视频流&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avcodec_open()&lt;/code&gt; 打开解码器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;av_read_frame()&lt;/code&gt; 从视频流中读取视频数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avcodec_decode_video2()&lt;/code&gt; 对视频数据进行解码&lt;/li&gt;
&lt;li&gt;进行图像转换&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>教程：使用Pelican和Github Pages搭建个人博客</title><link href="http://www.ishilei.com/pages/2014/11/03/creat-blog.html" rel="alternate"></link><updated>2014-11-03T19:44:00+08:00</updated><author><name>shilei</name></author><id>tag:www.ishilei.com,2014-11-03:pages/2014/11/03/creat-blog.html</id><summary type="html">&lt;h5&gt;前言&lt;/h5&gt;
&lt;p&gt;近段时间有了想搭建个人博客的冲动，因此也看了不少利用&lt;font color='red'&gt;Pelican&lt;/font&gt;和&lt;font color='red'&gt;Github Pages&lt;/font&gt;搭建博客的教程，但是完全按照教程去做，总会出现一些教程中没有提到的问题。因此，把自己成功搭建的过程也分享一下。&lt;/p&gt;
&lt;h5&gt;基础&lt;/h5&gt;
&lt;p&gt;1.搭建博客之前最好掌握git的基本操作，这样会让你在搭建的时候少很多困惑，比如一些基本的git命令，知道它的作用会对搭建博客以及以后博客的更新起到很大的作用。在此强烈推荐progit，不需要看完整本书，只需要了解其基本的操作命令。电子版链接&lt;a href="http://git-scm.com/book/zh/v1"&gt;progit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.pelican和github可自行搜索相关资料进行了解。博客写作编辑器markdown自行学习1小时便能搞定。  &lt;/p&gt;
&lt;h5&gt;安装环境&lt;/h5&gt;
&lt;p&gt;ubuntu 14.04&lt;br /&gt;
首先ubuntu就是利用git进行版本控制的，在ubuntu环境搭建基于github的博客系统个人感觉更加简单，更容易上手，用起来也更加方便，当然这得有linux环境操作基础。&lt;/p&gt;
&lt;h5&gt;安装Pelican&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;系统一般没有预装pip，因此需要先把pip安装了&lt;br /&gt;
&lt;code&gt;apt-get install pip&lt;/code&gt;  &lt;/p&gt;
&lt;h5&gt;安装markdown&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;创建blog目录&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;在blog目录下运行下面的命令&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行此命令后会出现一系列提示，可一直按enter键默认设置，以后可以在pelicanconf.py文件中进行修改。然后会生成一系列文件和目录&lt;br /&gt;
    content目录 存放输入的源文件，以后博客的.md源文件即存放在此目录&lt;br /&gt;
    output 目录 存放生成的的输出文件&lt;br /&gt;
    develop_server.sh 方便开启测试服务器&lt;br /&gt;
    Makefile  方便管理博客的Makefile&lt;br /&gt;
    pelicanconf.py 主配置文件&lt;br /&gt;
    publishconf.py 发布时使用的配置文件&lt;/p&gt;
&lt;h5&gt;写一篇简单的文章&lt;/h5&gt;
&lt;p&gt;首先进入content目录，用markdown生成一个.md的文件,其中文件的内容为:&lt;br /&gt;
    Data : 2014-11-3&lt;br /&gt;
    Title : test&lt;br /&gt;
    Tags : technology&lt;br /&gt;
    Category : technology&lt;br /&gt;
    Author: anyone&lt;/p&gt;
&lt;h5&gt;生成html&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;github仓库的准备&lt;/h5&gt;
&lt;p&gt;注册github，然后在Repositories下新建一个username.github.io的仓库，username是你github的用户名。&lt;/p&gt;
&lt;h5&gt;在github上创建GitHub Pages&lt;/h5&gt;
&lt;p&gt;进入blog目录下的output目录：&lt;br /&gt;
&lt;code&gt;git init&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git commit -m "first commit"&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git remote add origin https://github.com/X/X.github.io.git&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git push   origin master&lt;/code&gt;&lt;br /&gt;
倒数第二条命令中的X即github的用户名。如果你已经看过progit的话，就知道这些命令具体做了什么。&lt;/p&gt;
&lt;h5&gt;域名的绑定&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;首先买个域名。国内国外都有许多卖域名的网站。本人是在Godaddy上买的，支持支付宝支付。&lt;/li&gt;
&lt;li&gt;将域名与GitHub Pages进行空间绑定。即在username.github.io的根目录下新建一个CNAME的文本文件，里面写入你要绑定的域名。比如我的CNAME文件中内容就是：www.ishilei.com&lt;/li&gt;
&lt;li&gt;DNS的设置。推荐使用DNSpod,免费。&lt;/li&gt;
&lt;/ol&gt;
&lt;h6&gt;这部分内容的在这篇链接&lt;a href="http://blog.csdn.net/poem_of_sunshine/article/details/29369785"&gt;文章&lt;/a&gt;中讲的非常详细,虽然它是用hexo进行搭建，但是域名这一块是完全相同的。&lt;/h6&gt;</summary><category term="github pages"></category><category term="pelican"></category></entry></feed>